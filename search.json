[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Amarin Siripanich Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amarin Siripanich. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Siripanich (2022). hildar: HILDA Data Package Utils Functions Use HILDA Survey Data. R package version 0.2.1.9001, https://github.com/asiripanich/hildar.","code":"@Manual{,   title = {hildar: HILDA Data Package and Utils Functions to Use on HILDA Survey Data},   author = {Amarin Siripanich},   year = {2022},   note = {R package version 0.2.1.9001},   url = {https://github.com/asiripanich/hildar}, }"},{"path":"/index.html","id":"hildar","dir":"","previous_headings":"","what":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","title":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","text":"source: https://www.dss.gov.au/--department/national-centre--longitudinal-data HILDA survey data large panel survey close 20 waves (2001 - 2020), waves 5000 variables, makes reading R little challenging. goal package provide quick easy way query HILDA data R. possible converting wave HILDA STATA file (.dta), one three formats HILDA provides, fst format. [fst](https://github.com/fstpackage/fst) binary format can read much much quicker .dta R. Note , hil_dict data.frame object bundled package, generated using HILDA 2001 - 2016. Hence, covers variables 16 waves. future release, hilar create hil_dict matches HILDA data hil_setup().","code":""},{"path":"/index.html","id":"1-installation","dir":"","previous_headings":"","what":"1) Installation","title":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","text":"development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"asiripanich/hildar\")"},{"path":"/index.html","id":"2-store-hilda-as-fst-files","dir":"","previous_headings":"","what":"2) Store HILDA as .fst files","title":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","text":"Use hil_setup() read HILDA STATA (.dta) files save .fst files. .fst binary data format can read quickly, lot faster .dta. allow fast query data across waves using hil_fetch().","code":"hil_setup(dir_input = \"/path/to/your/hilda-stata-files\", dir_output = \"/path/to/save/hilda-fst-files\")"},{"path":"/index.html","id":"3-tell-hildar-where-the-fst-files-are-stored","dir":"","previous_headings":"","what":"3) Tell hildar where the .fst files are stored.","title":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","text":"hil_fetch() requires user tell HILDA fst files generated previous step stored. can either set HILDA_FST global option R environment variable. Setting persistent option R sessions make hil_fetch() convinient use. Alternatively, can manually set call using hilda_fst_dir argument hil_fetch().","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"HILDA Data Package and Utils Functions to Use on HILDA Survey Data","text":"can fetch HILDA data hildar! quick option add basic demographic variables data, set TRUE default. quick search find variables want? Use hil_dict data.table can search view HILDA variables without going documentation webpage. Let say want select variables related ‘employment’. can easily use selected employment variables hil_fetch(). summary dimensions HILDA data files.","code":"library(hildar)  # fetch removes the HILDA year prefix from all the selected variable # (e.g. axxx = 2001, bxxx = 2002). hil_fetch(years = 2001:2003, add_geography = T) %>%   summary() #>    xwaveid              hhid                wave          hgage           hgsex              mrcurr             hhrih              hhsgcc              hhwth             hhwtrp        #>  Length:55899       Length:55899       Min.   :1.00   Min.   :  0.00   Length:55899       Length:55899       Length:55899       Length:55899       Min.   :    0.0   Min.   :  -10.0   #>  Class :character   Class :character   1st Qu.:1.00   1st Qu.: 15.00   Class :character   Class :character   Class :character   Class :character   1st Qu.:  732.7   1st Qu.:  -10.0   #>  Mode  :character   Mode  :character   Median :2.00   Median : 34.00   Mode  :character   Mode  :character   Mode  :character   Mode  :character   Median :  909.4   Median :  821.9   #>                                        Mean   :1.96   Mean   : 34.82                                                                               Mean   : 1021.9   Mean   :  809.4   #>                                        3rd Qu.:3.00   3rd Qu.: 51.00                                                                               3rd Qu.: 1148.8   3rd Qu.: 1122.0   #>                                        Max.   :3.00   Max.   :100.00                                                                               Max.   :14094.0   Max.   :16000.0 hil_fetch(years = 2001, add_basic_vars = T) %>%   names() #> [1] \"xwaveid\" \"hhid\"    \"wave\"    \"hgage\"   \"hgsex\"   \"mrcurr\"  \"hhrih\"   \"hhwth\"   \"hhwtrp\" hilda_dictionary <- hil_dict() emp_vars <- hilda_dictionary[grepl(pattern = \"employment\", label), var] emp_vars #>   [1] \"hhura\"   \"fmfempo\" \"fmmempo\" \"esempst\" \"ujljcnt\" \"jbmind\"  \"jbempst\" \"jbmlh\"   \"molha\"   \"molmth\"  \"molyr\"   \"mol3rd\"  \"losateo\" \"loimpew\" \"jbmi06\"  \"es\"      \"esempdt\" \"fmfemp\"  \"fmmemp\"  \"lshrcom\" \"cnpu_fd\" \"cnpu_np\" \"cnpu_o1\" \"cnpu_o2\" \"cnpu_na\" \"cnph_o1\" #>  [27] \"cnph_o2\" \"cnpc_ps\" \"cnpc_fd\" \"cnpc_o1\" \"cnpc_o2\" \"cnsu_ps\" \"cnsu_fd\" \"cnsu_kp\" \"cnsu_np\" \"cnsu_o1\" \"cnsu_o2\" \"cnsu_na\" \"cnsh_bs\" \"cnsh_ru\" \"cnsh_re\" \"cnsh_ps\" \"cnsh_fd\" \"cnsh_kp\" \"cnsh_o1\" \"cnsh_o2\" \"cnsc_bs\" \"cnsc_ru\" \"cnsc_ps\" \"cnsc_fd\" \"cnsc_kp\" \"cnsc_o1\" #>  [53] \"cnsc_o2\" \"chkb12\"  \"pjothru\" \"pjothra\" \"pjotcnt\" \"fmfempn\" \"fmmempn\" \"lshremp\" \"lsmnemp\" \"lsmncom\" \"fisemr\"  \"lsemp\"   \"lscom\"   \"jbtremp\" \"ujtros\"  \"ncesop\"  \"rcesop\"  \"rtgwage\" \"cnsh_au\" \"hepuwrk\" \"herjob\"  \"herhour\" \"hechjob\" \"hetowrk\" \"heonas\"  \"hespeq\"  #>  [79] \"heothed\" \"nsu1_fd\" \"nsu1_o1\" \"nsu1_o2\" \"nsu1_na\" \"nsu1_np\" \"nsu2_fd\" \"nsu2_o1\" \"nsu2_o2\" \"nsu2_na\" \"nsu2_np\" \"nsu3_fd\" \"nsu3_o1\" \"nsu3_o2\" \"nsu3_na\" \"nsu3_np\" \"nsu4_fd\" \"nsu4_o1\" \"nsu4_o2\" \"nsu4_na\" \"nsu4_np\" \"nsu5_fd\" \"nsu5_o1\" \"nsu5_o2\" \"nsu5_na\" \"nsu5_np\" #> [105] \"nsu6_fd\" \"nsu6_o1\" \"nsu6_o2\" \"nsu6_na\" \"nsu6_np\" \"nsh1_ps\" \"nsh2_ps\" \"nsh3_ps\" \"nsh4_ps\" \"nsh5_ps\" \"nsh6_ps\" \"nsh1_fd\" \"nsh2_fd\" \"nsh3_fd\" \"nsh4_fd\" \"nsh5_fd\" \"nsh6_fd\" \"nsh1_o1\" \"nsh2_o1\" \"nsh3_o1\" \"nsh4_o1\" \"nsh5_o1\" \"nsh6_o1\" \"nsh1_o2\" \"nsh2_o2\" \"nsh3_o2\" #> [131] \"nsh4_o2\" \"nsh5_o2\" \"nsh6_o2\" \"npu1_o1\" \"npu1_o2\" \"npu1_na\" \"npu1_np\" \"npu2_o1\" \"npu2_o2\" \"npu2_na\" \"npu2_np\" \"npu3_o1\" \"npu3_o2\" \"npu3_na\" \"npu3_np\" \"npu4_o1\" \"npu4_o2\" \"npu4_na\" \"npu4_np\" \"npu5_o1\" \"npu5_o2\" \"npu5_na\" \"npu5_np\" \"npu6_o1\" \"npu6_o2\" \"npu6_na\" #> [157] \"npu6_np\" \"nph1_fd\" \"nph2_fd\" \"nph3_fd\" \"nph4_fd\" \"nph5_fd\" \"nph6_fd\" \"nph1_o1\" \"nph2_o1\" \"nph3_o1\" \"nph4_o1\" \"nph5_o1\" \"nph6_o1\" \"nph1_o2\" \"nph2_o2\" \"nph3_o2\" \"nph4_o2\" \"nph5_o2\" \"nph6_o2\" \"nrpmact\" \"jttpewt\" \"jttpeot\" \"jdemp\"   \"skces2\"  \"heothrf\" \"heothdk\" #> [183] \"chb12\"   \"lfpe01\"  \"lfpe02\"  \"lfpe03\"  \"lfpe04\"  \"lfpe05\"  \"lfpe06\"  \"lfpe07\"  \"lfpe08\"  \"lfpe09\"  \"lfpe10\"  \"lfpe11\"  \"lfpe12\"  \"lfpe13\"  \"lfpe14\"  \"lfpe15\"  \"lfpe16\"  \"lfpe17\"  \"lfpe18\"  \"lfpe19\"  \"cvpw\"    \"cvrd\"    \"cvipe\" hilda_data <- hil_fetch(years = 2001:2003, vars = emp_vars) dim(hilda_data) #> [1] 55899    79 # the number of variables and rows in each wave nrows_by_wave <-   hil_fetch(years = 2001:2020, add_basic_vars = F) %>%   .[, .(number_of_rows = .N), by = wave]  hilda_dictionary[, unlist(wave), by = .(var, label)] %>%   data.table::setnames(\"V1\", \"wave\") %>%   .[!is.na(wave), .(number_of_variables = .N), by = wave] %>%   merge(nrows_by_wave, by = \"wave\") #>     wave number_of_variables number_of_rows #>  1:    1                4289          19914 #>  2:    2                5220          18295 #>  3:    3                5214          17690 #>  4:    4                5081          17209 #>  5:    5                5893          17467 #>  6:    6                6140          17453 #>  7:    7                6044          17280 #>  8:    8                6186          17144 #>  9:    9                6202          17632 #> 10:   10                6488          17855 #> 11:   11                6691          23415 #> 12:   12                6530          23182 #> 13:   13                6455          23299 #> 14:   14                6719          23114 #> 15:   15                6800          23305 #> 16:   16                6433          23507 #> 17:   17                6697          23442 #> 18:   18                7093          23267 #> 19:   19                7278          23256 #> 20:   20                6864          22932"},{"path":"/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch HILDA data — fetch","title":"Fetch HILDA data — fetch","text":"Soft-deprecated, new code use hil_fetch().","code":""},{"path":"/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch HILDA data — fetch","text":"","code":"fetch(   years,   vars = NULL,   new_varnames = NULL,   add_population_weight = TRUE,   add_basic_vars = TRUE,   add_geography = FALSE,   .dir = getOption(\"hildar.vault\") )"},{"path":"/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch HILDA data — fetch","text":"See hil_fetch().","code":""},{"path":"/reference/get_hilda_fst_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a HILDA_FST environment variable — get_hilda_fst_path","title":"Get a HILDA_FST environment variable — get_hilda_fst_path","text":"returns environment variable called HILDA_FST pathname HILDA fst files stored.","code":""},{"path":"/reference/get_hilda_fst_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a HILDA_FST environment variable — get_hilda_fst_path","text":"","code":"get_hilda_fst_path()"},{"path":"/reference/get_hilda_fst_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a HILDA_FST environment variable — get_hilda_fst_path","text":"pathname.","code":""},{"path":"/reference/hil_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch HILDA data — hil_fetch","title":"Fetch HILDA data — hil_fetch","text":"Fetch HILDA data","code":""},{"path":"/reference/hil_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch HILDA data — hil_fetch","text":"","code":"hil_fetch(   years = NULL,   vars = NULL,   new_varnames = NULL,   add_population_weight = TRUE,   add_basic_vars = TRUE,   add_geography = FALSE,   hilda_fst_dir = ifelse(!is.null(getOption(\"HILDA_FST\")), getOption(\"HILDA_FST\"),     get_hilda_fst_path()) )"},{"path":"/reference/hil_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch HILDA data — hil_fetch","text":"years argument allow specify years HILDA like load instead using alphabets. first wave HILDA 2001 known wave '', following year wave 'b'. load multiple waves can put use numeric vector (e.g.,2001:2009 load waves 2001 2009). vars vector containing desired variable names loaded. vars can set \"\" fetch columns. may take long time load new_varnames vector contains character names length equals length vars replaced vars orgininal names. add_population_weight take logical value whether add cross-sectional responding person weight column enumerated weight column data add_basic_vars take logical value whether add hgage (age), hgsex (sex), mrcurr (marital status) hhrih (relationship household) data add_geography take logical value whether add hhsgcc (Greater statistical region) data hilda_fst_dir directory HILDA files fst format stored hil_setup(). given function check uses 'HILDA_FST' .Rprofile file first, .Renviron file.","code":""},{"path":"/reference/hil_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch HILDA data — hil_fetch","text":"data.table object","code":""},{"path":"/reference/hil_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Save HILDA Stata files data to fst data — hil_setup","title":"Save HILDA Stata files data to fst data — hil_setup","text":"functions looks directory HILDA files .dta. format save fst files. fst files used hil_fetch() loading querying HILDA data.","code":""},{"path":"/reference/hil_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save HILDA Stata files data to fst data — hil_setup","text":"","code":"hil_setup(read_dir, save_dir)  make_dict(read_dir, save_dir = NULL)  hil_dict()"},{"path":"/reference/hil_setup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Save HILDA Stata files data to fst data — hil_setup","text":"hil_dict() returns data table many rows 3 variables: var (character()) variable names wave (list(integer())) waves variable recorded label (character()) short description variable","code":""},{"path":"/reference/hil_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save HILDA Stata files data to fst data — hil_setup","text":"read_dir read directory HILDA files match Combined_.*.dta regex pattern . save_dir directory save HILDA files 'fst' format. directory added .Rprofile hildar.vault.","code":""},{"path":"/reference/hil_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save HILDA Stata files data to fst data — hil_setup","text":"make_dict() returns data.table contains three columns: var, label, wave. save_dir NULL, dict saved location.","code":""},{"path":"/reference/hil_setup.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Save HILDA Stata files data to fst data — hil_setup","text":"function can take long time finish since HILDA file quite large. One option use future package choose parallel backend running hil_fetch(). following code chuck uses multisession creates background R sessions equal number workers.","code":"library(future) plan(multisession, workers = 2)"},{"path":"/reference/hil_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save HILDA Stata files data to fst data — hil_setup","text":"","code":"# HILDA data dictionary if (FALSE) {  hil_dict() }"},{"path":"/reference/hildar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hildar: HILDA Data Package and Utils Functions to Use on HILDA Survey Data — hildar-package","title":"hildar: HILDA Data Package and Utils Functions to Use on HILDA Survey Data — hildar-package","text":"Fast query HILDA storing fst format.","code":""},{"path":[]},{"path":"/reference/is_missing_data_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Is missing data value — is_missing_data_value","title":"Is missing data value — is_missing_data_value","text":"Returns TRUE values inside variable contains missing data values coding HILDA. usally starts [-{number}] negative value variable type numeric.","code":""},{"path":"/reference/is_missing_data_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is missing data value — is_missing_data_value","text":"","code":"is_missing_data_value(x)"},{"path":"/reference/is_missing_data_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is missing data value — is_missing_data_value","text":"x vector","code":""},{"path":"/reference/is_missing_data_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is missing data value — is_missing_data_value","text":"logical vector","code":""},{"path":"/reference/is_missing_data_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is missing data value — is_missing_data_value","text":"","code":"if (FALSE) { h <- hil_fetch(2011) h[is_missing_data_value(mrcurr)] }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/remove_leading_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove non-missing leading numbers — remove_leading_numbers","title":"Remove non-missing leading numbers — remove_leading_numbers","text":"HILDA factor levels numbered. leading numbers needed one can use function recode factor lavels.","code":""},{"path":"/reference/remove_leading_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove non-missing leading numbers — remove_leading_numbers","text":"","code":"remove_leading_numbers(x)"},{"path":"/reference/remove_leading_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove non-missing leading numbers — remove_leading_numbers","text":"x vector column HILDA data","code":""},{"path":"/reference/remove_leading_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove non-missing leading numbers — remove_leading_numbers","text":"vector","code":""},{"path":"/reference/setup_hildar.html","id":null,"dir":"Reference","previous_headings":"","what":"Save HILDA Stata files data to fst data — setup_hildar","title":"Save HILDA Stata files data to fst data — setup_hildar","text":"Soft-deprecated, new code use hil_setup().","code":""},{"path":"/reference/setup_hildar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save HILDA Stata files data to fst data — setup_hildar","text":"","code":"setup_hildar(read_dir, save_dir, n_cores = NULL, pattern = \".dta\")"},{"path":"/reference/setup_hildar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save HILDA Stata files data to fst data — setup_hildar","text":"See hil_setup().","code":""},{"path":"/reference/standardise_hilda_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the leading alphabets of all the columns\nexcept those start with 'x' — standardise_hilda_colnames","title":"Remove the leading alphabets of all the columns\nexcept those start with 'x' — standardise_hilda_colnames","text":"Remove leading alphabets columns except start 'x'","code":""},{"path":"/reference/standardise_hilda_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the leading alphabets of all the columns\nexcept those start with 'x' — standardise_hilda_colnames","text":"","code":"standardise_hilda_colnames(hilda_data)"},{"path":"/reference/standardise_hilda_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the leading alphabets of all the columns\nexcept those start with 'x' — standardise_hilda_colnames","text":"hilda_data data.frame containing HILDA dataset","code":""},{"path":"/reference/standardise_hilda_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the leading alphabets of all the columns\nexcept those start with 'x' — standardise_hilda_colnames","text":"data.table","code":""},{"path":"/news/index.html","id":"hildar-0219001","dir":"Changelog","previous_headings":"","what":"hildar 0.2.1.9001","title":"hildar 0.2.1.9001","text":"Improved README. make_dict() now converts wave column integer. Removed old test setup file. hil_setup() now adds dictionary file save_dir able find HILDA files read_dir correctly. hil_fetch() now works releases HILDA just release 16, unintentionally added. Replaced hil_dict object hil_dict() function returns .","code":""},{"path":"/news/index.html","id":"hildar-0219000","dir":"Changelog","previous_headings":"","what":"hildar 0.2.1.9000","title":"hildar 0.2.1.9000","text":"previous version.","code":""},{"path":"/news/index.html","id":"hildar-021","dir":"Changelog","previous_headings":"","what":"hildar 0.2.1","title":"hildar 0.2.1","text":"Properly import packages used functions. Fix wrong warning messages deprecate functions.","code":""},{"path":"/news/index.html","id":"hildar-020","dir":"Changelog","previous_headings":"","what":"hildar 0.2.0","title":"hildar 0.2.0","text":"hil_fetch() looks HILDA_FST .Rprofile .Renviron provided user. Also, .dir argument now hilda_fst_dir. Simplify hil_setup() removing n_cores pattern arguments. See Notes. Renamed hilda_dict hil_dict. Remove minimum versions dependencies. Use hil_ pkg suffix. fetch() setup_hildar() renamed hil_fetch() hil_setup(). # hildar 0.1.0 Added NEWS.md file track changes package.","code":""}]
